{
	"name": "Dynamic Pipeline",
	"properties": {
		"activities": [
			{
				"name": "Get a list of tables",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select \nschemaName\n,tableName\n,loadType\n,latestProcessDate\n,fieldThatHasLastProcessDateInTable\n from dbo.tblWaterMark",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dsGenericAzureSqlTable",
						"type": "DatasetReference",
						"parameters": {
							"dsDbNme": {
								"value": "@pipeline().parameters.pipDbName",
								"type": "Expression"
							},
							"dsSrvrNme": {
								"value": "@pipeline().parameters.pipSrvrNme",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "iterate over tables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get a list of tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get a list of tables').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "full data from tables",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT * FROM ',item().schemaName,'.',item().tablename)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "dsGenericAzureSqlTable",
									"type": "DatasetReference",
									"parameters": {
										"dsDbNme": {
											"value": "@pipeline().parameters.pipDbName",
											"type": "Expression"
										},
										"dsSrvrNme": {
											"value": "@pipeline().parameters.pipSrvrNme",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "dsGenericAdlsG2",
									"type": "DatasetReference",
									"parameters": {
										"serverName": {
											"value": "@pipeline().parameters.pipSrvrNme",
											"type": "Expression"
										},
										"databaseName": {
											"value": "@pipeline().parameters.pipDbName",
											"type": "Expression"
										},
										"schemaName": {
											"value": "@item().schemaName",
											"type": "Expression"
										},
										"tableName": {
											"value": "@item().tableName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "check Load Type",
							"description": "Look at the load type and do either an incremental or a full load",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(item().loadType,'FULL')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "check Load Type_copy1",
										"description": "Look at the load type and do either an incremental or a full load",
										"type": "IfCondition",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"expression": {
												"value": "@equals(item().loadType,'FULL')",
												"type": "Expression"
											},
											"ifTrueActivities": [
												{
													"name": "Copy data1_copy1",
													"type": "Copy",
													"dependsOn": [],
													"policy": {
														"timeout": "0.12:00:00",
														"retry": 0,
														"retryIntervalInSeconds": 30,
														"secureOutput": false,
														"secureInput": false
													},
													"userProperties": [],
													"typeProperties": {
														"enableStaging": false
													}
												}
											]
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"parameters": {
			"pipSrvrNme": {
				"type": "string",
				"defaultValue": "sqltesta.database.windows.net"
			},
			"pipDbName": {
				"type": "string",
				"defaultValue": "AdventureWorks"
			}
		},
		"annotations": []
	}
}